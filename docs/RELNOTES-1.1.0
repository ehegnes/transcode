===============================
 Transcode 1.1.0 Release Notes
===============================
:Info: See <http://www.transcoding.org> for more documentation.
:Author: Francesco Romani <fromani@gmail.com>
:Date: $Date: 2008-08-10 11:07:07 $
:Revision: $Revision: 1.1.2.4 $


Introduction
============

The transcode team is pleased to announce the avalbility of transcode 1.1.0.
Transcode 1.1.0 is our new major release, that establishes a new milestone for
the project: we have started a massive reorganization of the code, aiming to
address some historical weakness of the project and to prepare land for next
major enhancements.
Despite the huge effort expended, 1.1.0 is a transitional release.
Most of the resources were employed to make the project foundations better, 
and a very few benefits surfaced so far; But our effort was fruitful, so
we are ready to develop some new exciting news for next releases. Expect
quicker and more interesting releases soon.


Overview
========

This section outlines the changes between transcode 1.0.x and 1.1.0.

---

(transcode) Command line reorganization
  Some options are renamed, some other are merged, a few others are removed,
  in order to make the command line more rational and consistent; online help
  (-h) layout was massively reorganized to improve readability.

(transcode) Module cleanup
  During 1.1.0 development cycle the duplicated, obsolete or even broken modules
  are been dropped in order to reduce the maintenance burden without reducing the
  feature set. Some modules that duplicates the functionalities of the core are 
  been removed as well, and core functionalities was enhanced.

(overall) Internal colorspace rationalization
  Usage of default colorspace (YUV420P) used internally in transcode is made
  consistent through core and modules. No more random usage of -k option,
  that is still of course avalabile, and no more blue people.

(transcode) Frame counter improvements
  The output of frame counter, that also acts as progress meter, was rewritten
  and improved. Now it shows more precisely the extimate finishing time, and
  it now precisely shows the number of frames in every processing step.

(tools) New output modes for tcprobe
  tcprobe features two now output modes: extended output (option -X) is more
  human-friendly and less cluttered; raw output (-R) is intended to be more stable
  in time and easier to parse for machines. Old output mode is of course still
  the default.

(overall) **LOT** of bugfixes
  **ALL** bugfixes, and much more, applied to 1.0.x branch are of course
  applied as well on this release.

(transcode) new multiple input mode (**technology preview**)
  In the past releases, a few modules where capable to handle a directory as a source
  and join all file contained. This feature extend trasparently this capability to *all*
  modules, allowing the user to specify a collection of -of course, homogeneous- sources
  that will be intelligently join. This feature can be enabled using --multi_input mode,
  but is still a preview, only a few modules are supported. See transcode(1) for details.

(overall) new experimental modules (**technology preview**)
  As part of internal reorganization and rationalization (see below), a new, revised, improved
  architecture for writing transcode modules was introduced. New architecture (*NMS* in transcode
  jargon) allows to write more specialized modules, enhances their combinations and reduces
  code replication. A fair number of new modules are been written, and more are avalaible
  in CVS; those modules are fairly stable, but disabled by default to simplify things for the user.
  We expect to fully switch to new modules at least for export side for transcode 1.2.0.

(overall) better module introspection (**technology preview**)
  Another important benefit of new module architecture is to allow the modules to communicate
  with transcode core in more complete and unified fashion. The immediate benefit is that
  now tcmodinfo is capable to show some module properties (of NMS-compliant modules).
  In the long term, this will allow some more juicy things like autocalculation of optimum
  buffer size, auto colorspace negotiation and so on.

(modules) new modules
  * import_vag:
    decodes VAG audio from PlayStation.
  * import_pv3:
    provides access to Earth Soft PV3 audio/video streams using
    win32 binary codecs and an internal win32 emulation layer (NO wine needed).

(modules) improved modules
  * import_mplayer:
    this module was greatly improved to better integrate with mplayer, autodetecting the proper
    settings. A -M option was also added to tcprobe, to let the program use mplayer internally 
    for probing, in order to have coherent settings.
    A further option --mplayer_probe was added to transcode. This option automatically loads
    mplayer import modules both for audio and video streams and also force mplayer for
    detection of streams parameters.
    Using --mplayer_probe will (Just Work[tm]) in a broad amount of cases.
  * import_avi:
    internal colorspace conversion for raw content was added. Now this module trasparently
    convert the raw content to selected colorspace.
  * filter_logo:
    WRITEME
  * all LZO-related modules:
    those modules are ported, and thus now require, to liblzo version 2.
  * import_vob:
    The `nodemux' option was added. This option allow to skip the internal synchronization
    code that can deliver broken results in some still unknown cases.
  * import_ffmpeg:
    The `nopad' option was added. This option allow to force to off the input padding setting
    that is sometims incorrectly setup by libavcodec in some still unknown cases.
    Use this setting if you see the 'slice end reached but...' message during your transcoding.

  You can see the full list of modules options by reading the new split manpages (see below).

(overall) massive architectural reorganization
  A great amount of effort was spended in order to reorganize, modularize and document the
  transcode codebase. The first result is the introduction of the following libraries:

  * aclib      - ASM accelerated low-level routines.
  * libtc      - utilities and common infrastructure.
  * libtcvideo - high-level video conversion/handling routines.
  * libtcaudio - high-level audio conversion/handling routines.

(overall) growing testsuite
  During the 1.1.0 development cycle, we've steadily incremented the amount of automated tests for
  the codebase. The long-term goal is to have a comprehensive and automatic test suite, including
  the autogeneration of sample test files.

(documentation) documentation improvements
  The improvement of documentation for both user and developer side was another goal of this
  new development cycle. Foundations are been laid with the reorganization of manpages.
  Much more effort was spent -and will be spent- with the careful and comprehensive introduction
  of source code comments, describing internal APIs; with the introduction of developer-oriented
  documentation and tutorial. More will come. Keep your eyes on docs/tech tree and on our sites.

(documentation) manpage revision and split
  The transcode manpage was a huge, scaring beast. We're splitted it into four pieces, describing
  the transcode core and the modules, divided per module class (import, filter, export).
  Splitted manpages are now the official reference for the options of the modules.

(tools) more helper tools
  * tcexport    - provides direct access to transcode export layer.
  * tcmodchain  - test if two modules can be joined together.


User visible Changes
====================

See the document `CHANGES-1.0-1.1' for a detailed list of user-visible changes,
including commandline options and their syntax, and transcode's output.


For Developers
==============


Bugs
====


Technology Previews
===================


Last Words
==========


