# Process this file with autoconf to produce a configure script.

AC_INIT(transcode,0.6.13)
AC_CONFIG_AUX_DIR(autotools)
AC_CONFIG_SRCDIR(src/transcode.c)

dnl Detect the canonical host and target build environment
AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(transcode,0.6.13)
AM_CONFIG_HEADER(config.h)
  
AM_MAINTAINER_MODE

# Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# dnl added 2002-04-26
AM_PROG_AS
AS=$CC
CCAS='$(CC)'
AC_SUBST(CCAS)
AC_PROG_CC
AC_SUBST(CCASFLAGS)
ASFLAGS="$CCASFLAGS"
AC_SUBST(ASFLAGS)

deflib="/lib"

is_osx=false
case "x${target_os}" in
  xdarwin*)
    is_osx=true
    CFLAGS="${CFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"
    CXXFLAGS="${CXXFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"
    OBJCFLAGS="${OBJCFLAGS} -no-cpp-precomp -D_INTL_REDIRECT_MACROS"
    #LDFLAGS="${LDFLAGS} -all_load"

    AC_DEFINE([SYSTEM_DARWIN], 1, [Define if this is Darwin / MacOSX OS])
    AC_DEFINE([BROKEN_PTHREADS], 1, [Define if you have weird pthreads])

    # Include Fink in compile and link if present
    if test -d /sw; then
      CPPFLAGS="${CPPFLAGS} -I/sw/include"
      LDFLAGS="${LDFLAGS} -L/sw/lib"
    fi
    ;;
esac

case "x${target_cpu}" in
  xx86_64*)
    is_amd64=true
    deflib="/lib64"
    AC_MSG_NOTICE([AMD64 CPU detected])
    ;;
esac


AM_CONDITIONAL([SYSTEM_DARWIN], test x"$is_osx" = x"true")
 
# Checks for libraries.
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_FUNCS([dlopen])
if test x"$is_osx" = x"true" ; then
  AC_CHECK_FUNCS(dlsym_prepend_underscore,
    [CFLAGS="${CFLAGS} -Ddlsym=dlsym_prepend_underscore"],
    AC_MSG_WARN([Function 'dlsym_prepend_underscore' not found.])
    AC_MSG_WARN([Using function 'dlsym' directly instead.])
    AC_MSG_WARN([This can be a problem if the installed dlsym])
    AC_MSG_WARN([does not automatically prepend an underscore])
    AC_MSG_WARN([to symbols.]))
fi
AC_DISABLE_STATIC

# Checks for support lib
enable_supportlib=no
AC_CHECK_FUNCS(getopt_long_only,[],
  [enable_supportlib="yes" 
    SUPPORT_OBJECTS="$SUPPORT_OBJECTS getopt.o getopt1.o"])
AC_MSG_CHECKING([whether support lib is needed])
AC_MSG_RESULT($enable_supportlib)
if test x"$enable_supportlib" = x"yes" ; then
  SUPPORT_LIBS="\$(top_builddir)/libsupport/libsupport.a" 
  SUPPORT_INCLUDES="-I\$(top_srcdir)/libsupport"
  AC_SUBST(SUPPORT_OBJECTS)
  AC_SUBST(SUPPORT_LIBS)
  AC_SUBST(SUPPORT_INCLUDES)
fi

if test x"$ac_cv_lib_dl_dlopen" = x"no" ; then
  case x${target_os} in
    xdarwin*)
      DLDARWINOBJECTS="$DLDARWINOBJECTS dlfcn_simple.o"
      DLDARWINLIB="\$(top_builddir)/libdldarwin/libdldarwin.a"
      DLDARWININCL="-I\$(top_srcdir)/libdldarwin/"
      ;;
  esac
fi
DLDARWINOBJECTS="$DLDARWINOBJECTS dummy.o"
AC_SUBST(DLDARWINOBJECTS)
AC_SUBST(DLDARWINLIB)
AC_SUBST(DLDARWININCL)


# Checks for header files.
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS([errno.h fcntl.h sys/time.h unistd.h limits.h])
AC_CHECK_HEADERS([inttypes.h malloc.h alloca.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_C_INLINE
AC_TYPE_SIZE_T 
AC_C_BIGENDIAN([big_endian=true
  AC_DEFINE([WORDS_BIGENDIAN], 1, [Define if your CPU is big endian])],
  big_endian=false)
AM_CONDITIONAL(BIG_ENDIAN, test x"$big_endian" = x"true")
AC_TYPE_OFF_T
AC_C_ATTRIBUTE_ALIGNED

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_ALLOCA
AC_FUNC_VPRINTF
AC_FUNC_STAT
AC_FUNC_STRCOLL
AC_TYPE_SIGNAL
AC_CHECK_FUNCS([strtol memalign ftruncate gettimeofday memset strerror])
AC_CHECK_FUNCS([strncasecmp stat floor atexit getpagesize memmove mkfifo])
AC_CHECK_FUNCS([vsscanf strptime alloca])

AC_CHECK_LIB(m, lrint,
  AC_DEFINE([HAVE_LIBM_LRINT], 1,
    [Define if the lrint() function is in libm on your system]))

case "$host_os" in
  freebsd*|openbsd*|netbsd*|bsdi*|darwin*|rhapsody*)
     AC_DEFINE([SYS_BSD], 1, [Define if your system is modern BSD])
     ;;
  *)
     ;;
esac


dnl check for pthreads
dnl
case "$host" in
  *-*-freebsd*|*-*-openbsd*)
    pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
    pthread_lib="-pthread"
    ;;
  *-*-bsdi*)
    pthread_cflags="-D_REENTRANT -D_THREAD_SAFE"
    pthread_lib=""
    ;;
  *)
    pthread_cflags="-D_REENTRANT"
    pthread_lib="-lpthread"
    ;;
esac
save_LIBS="$LIBS"
LIBS="$LIBS $pthread_lib"
AC_MSG_CHECKING(for pthreads in $pthread_lib)
AC_TRY_LINK([
#include <pthread.h>
],[
   pthread_attr_t type;
   pthread_attr_init(&type);
],
  [use_pthreads=yes],
  [use_pthreads=no]);
LIBS="$save_LIBS"
AC_MSG_RESULT($use_pthreads)
if test x"$use_pthreads" = x"yes" ; then
  PTHREAD_LIBS="$pthread_lib"
else
  PTHREAD_LIBS=""
fi
AC_SUBST(PTHREAD_LIBS)

dnl
dnl Architecture specific instructions
dnl

AC_MSG_CHECKING([for build architecture])
have_x86cpu=false
have_ppccpu=false
case x"$host_cpu" in
  xi?86*|xk6*)
    have_x86cpu=true
    AC_MSG_RESULT([Intel Pentium architecture (IA32)])
    AC_DEFINE([ARCH_X86], 1, [Define if your machine is X86 based])
    ;;
  xpowerpc*)
    have_ppccpu=true
    AC_MSG_RESULT([Mac PPC architecture (PPC)])
    AC_DEFINE([ARCH_PPC], 1, [Define if your machine is PPC based])
    ;;
  *)
    ;;
esac
AM_CONDITIONAL(ARCH_X86, test x"$have_x86cpu" = x"true")
AM_CONDITIONAL(ARCH_PPC, test x"$have_ppccpu" = x"true")


dnl x86 architectures


dnl MMX support
dnl
AC_ARG_ENABLE(mmx,
  AC_HELP_STRING([--enable-mmx],
    [enable MMX code portions (yes)]),
  [case "${enableval}" in
    yes) use_mmx=yes ;;
    no)  use_mmx=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmx) ;;
  esac],
  [if test x"$have_x86cpu" = x"true" ; then
    use_mmx=yes
  else
    use_mmx=no
  fi])

AC_MSG_CHECKING([if \$CC groks MMX inline assembly])
have_asm_mmx="no"
if test x"$use_mmx" = x"yes" ; then
  AC_TRY_COMPILE([],
    [void *p;asm volatile("packuswb %%mm1,%%mm2"::"r"(p));],
    [have_asm_mmx="yes"])
  if test x"$have_asm_mmx" = x"yes" ; then
    AC_DEFINE([HAVE_ASM_MMX], 1,
      [Define if your CPU understands ASM MMX instructions])
    AC_DEFINE([HAVE_MMX], 1,
      [Define if your CPU understands MMX instructions])
  fi
fi
AC_MSG_RESULT($have_asm_mmx)
AM_CONDITIONAL(HAVE_MMX, test x"$have_asm_mmx" = x"yes")
if test x"$have_asm_mmx" = x"no" ; then
  AC_MSG_WARN(*** All of mmx dependent parts will be disabled ***)
fi

have_asm_nasm="no"
if test x"$use_mmx" = x"yes" ; then
  AC_MSG_CHECKING([for support for gcc-style register parameters on Intel])
  AC_TRY_COMPILE([],
    [extern void x(
      const unsigned char *src1,
      const unsigned char *src2,
      unsigned count,
      unsigned char *dst) __attribute((regparm(3)));],
    [AC_MSG_RESULT(yes)
      AC_PATH_PROG(NASM, nasm, no)
      case "${NASM}" in
        no)
          ;;
        *)
          dnl Check nasm version
          AC_MSG_CHECKING([for recent nasm version])
          nasm_patch_version=`${NASM} -r | cut -d '.' -f 3 | cut -d ' ' -f 1`
          if test "$nasm_patch_version" -lt "34" ; then
            AC_MSG_RESULT([no])
            AC_MSG_WARN(*** NASM Optimizations disabled....)
          else
            AC_MSG_RESULT([yes])
            AC_DEFINE([HAVE_ASM_NASM], 1, [have nasm])
            NASMFLAGS="-felf"
            AC_SUBST(NASMFLAGS)
            have_asm_nasm="yes"
          fi
          ;;
      esac],
    [AC_MSG_RESULT(no)
      AC_MSG_WARN(*** MMX Optimizations disabled....)]);
fi
AM_CONDITIONAL(HAVE_ASM_NASM, test x"$have_asm_nasm" = x"yes")


dnl 3DNow support
dnl
AC_ARG_ENABLE(3dnow,
  AC_HELP_STRING([--enable-3dnow],
    [enable 3DNow code portions (yes)]),
  [case "${enableval}" in
    yes) use_3dnow=yes ;;
    no)  use_3dnow=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-3dnow) ;;
  esac],
  [if test x"$have_x86cpu" = x"true" ; then
    use_3dnow=yes
  else
    use_3dnow=no
  fi])
AC_MSG_CHECKING([for support of 3DNow in assembly code])
have_asm_3dnow="no"
if test x"$use_3dnow" = x"yes" ; then
  cat > conftest.S <<EOF
    .text

    pfmul %mm3, %mm4
EOF
  if $CC -c conftest.S ; then
    rm -f conftest.*
    AC_DEFINE([HAVE_ASM_3DNOW], 1,
      [Define if your CPU understands ASM 3DNow instructions])
    AC_DEFINE([HAVE_3DNOW], 1,
      [Define if your CPU understands 3DNow instructions])
    have_asm_3dnow="yes"
  else
    echo "configure: failed program was:" >&AC_FD_CC
    cat conftest.S >&AC_FD_CC
    rm -f conftest.*
  fi
fi
AC_MSG_RESULT($have_asm_3dnow)
AM_CONDITIONAL(HAVE_3DNOW, test x"$have_asm_3dnow" = x"yes")
if test x"$have_asm_3dnow" = x"no" ; then
  AC_MSG_WARN(*** All of 3DNow dependent parts will be disabled ***)
fi


dnl SSE support
dnl
AC_ARG_ENABLE(sse,
  AC_HELP_STRING([--enable-sse],
    [enable SSE code portions (yes)]),
  [case "${enableval}" in
    yes) use_sse=yes ;;
    no)  use_sse=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-sse) ;;
  esac],
  [if test x"$have_x86cpu" = x"true" ; then
    use_sse=yes
  else
    use_sse=no
  fi])
AC_MSG_CHECKING([if \$CC groks SSE inline assembly])
have_asm_sse="no"
if test x"$use_sse" = x"yes" ; then
  AC_TRY_COMPILE([],
    [void *p; asm volatile("movntps  %%xmm0, 0"::"r"(p));],
    [have_asm_sse=yes])
  if test x"$have_asm_sse" = x"yes" ; then
    AC_DEFINE([HAVE_ASM_SSE], 1,
      [Define if your CPU understands ASM SSE instructions])
    AC_DEFINE([HAVE_SSE], 1,
      [Define if your CPU understands SSE instructions])
  fi
fi
AC_MSG_RESULT($have_asm_sse)
AM_CONDITIONAL(HAVE_SSE, test x"$have_asm_sse" = x"yes")
if test x"$have_asm_sse" = x"no" ; then
  AC_MSG_WARN(*** All of sse dependent parts will be disabled ***)
fi


dnl SSE2 support
dnl
AC_ARG_ENABLE(sse2,
  AC_HELP_STRING([--enable-sse2],
    [enable SSE2 code portions (yes)]),
  [case "${enableval}" in
    yes) use_sse2=yes ;;
    no)  use_sse2=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-sse2) ;;
  esac],
  [if test x"$have_x86cpu" = x"true" ; then
    use_sse2=yes
  else
    use_sse2=no
  fi])
AC_MSG_CHECKING([if \$CC can handle SSE2 inline asm])
have_asm_sse2="no"
if test x"$use_sse2" = x"yes" ; then
  AC_TRY_COMPILE([],
    [void *p; asm volatile("movdqa  %%xmm2, %%xmm3"::"r"(p));],
    [have_asm_sse2=yes])
  if test x"$have_asm_sse2" = x"yes" ; then
    AC_DEFINE([HAVE_ASM_SSE2], 1,
      [Define if your CPU understands ASM SSE2 instructions])
    AC_DEFINE([HAVE_SSE2], 1,
      [Define if your CPU understands SSE2 instructions])
  fi
fi
AC_MSG_RESULT($have_asm_sse2)
AM_CONDITIONAL(HAVE_SSE2, test x"$have_asm_sse2" = x"yes")
if test x"$have_asm_sse2" = x"no" ; then
  AC_MSG_RESULT(*** All of sse2 dependent parts will be disabled ***)
fi


dnl CMOV support
dnl
AC_ARG_ENABLE(cmov,
  AC_HELP_STRING([--enable-cmov],
    [enable CMOV code portions (yes)]),
  [case "${enableval}" in
    yes) use_cmov=yes ;;
    no)  use_cmov=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-cmov) ;;
  esac],
  [if test x"$have_x86cpu" = x"true" ; then
    use_cmov=yes
  else
    use_cmov=no
  fi])
have_cmov=no
AC_MSG_CHECKING([for CMOV support])
if test x"$use_cmov" = x"yes" ; then
  case "$host" in
    *-*-freebsd*|*-*-openbsd*|*-*-netbsd*)
      if grep -q CMOV /var/run/dmesg.boot ; then
        have_cmov=yes
      fi
      ;;
    *)
      cpu_family=`grep "cpu family" /proc/cpuinfo | awk 'BEGIN { FS = ":"; } { printf "%d", $2 + 0;}'`
      if test "$cpu_family" -gt 5 ; then
        have_cmov=yes
      fi
      ;;
  esac
fi
AC_MSG_RESULT($have_cmov)
if test x"$have_cmov" = x"yes" ; then
  AC_DEFINE([HAVE_CMOV], 1, [Define if your CPU understands CMOV])
fi



dnl ppc architectures


dnl
dnl Altivec support
dnl
AC_ARG_ENABLE(altivec,
  AC_HELP_STRING([--enable-altivec],
    [enable Altivec code portions (yes)]),
  [case "${enableval}" in
    yes) use_altivec=yes ;;
    no)  use_altivec=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-altivec) ;;
  esac],
  [if test x"$have_ppccpu" = x"true" ; then
    use_altivec=yes
  else
    use_altivec=no
  fi])
dnl if test x"$use_altivec" = x"no" ; then
dnl	AC_MSG_WARN(*** All of Altivec dependent parts will be disabled ***)
dnl fi


AC_MSG_CHECKING([if \$CC groks AltiVec inline assembly])
have_asm_altivec=no
if test x"$use_altivec" = x"yes" ; then
  AC_TRY_COMPILE([],
    [asm volatile("vperm 0,1,2,3");],
    [have_asm_altivec=yes],
    [save_CFLAGS="$CFLAGS"
      CFLAGS="$CFLAGS -Wa,-m7400"
      AC_TRY_COMPILE([],
        [asm volatile("vperm 0,1,2,3");],
        [have_asm_altivec=yes])
      CFLAGS="$save_CFLAGS"])
fi
AC_MSG_RESULT($have_asm_altivec)
if test x"$have_asm_altivec" = x"yes" ; then
  AC_DEFINE([HAVE_PPC_ALTIVEC], 1,
    [Define if \$CC groks AltiVec inline assembly].)
fi

AC_MSG_CHECKING([if \$CC groks AltiVec C extensions])
have_c_altivec=no
if test x"$use_altivec" = x"yes" ; then
  # Darwin test
  save_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS -faltivec"
  AC_TRY_COMPILE([],
    [vec_mtvscr((vector unsigned int)(0));],
    [have_c_altivec=yes
      ALTIVEC_CFLAGS="-faltivec"],
    [# Linux/PPC test
      CFLAGS="${save_CFLAGS} -fvec"
      AC_TRY_COMPILE([],
        [vec_mtvscr((vector unsigned int)(0));],
        [have_c_altivec=yes
          ALTIVEC_CFLAGS="-fvec"])
    ])
  CFLAGS="$save_CFLAGS"
fi
AC_MSG_RESULT($have_c_altivec)
AM_CONDITIONAL(CAN_COMPILE_C_ALTIVEC, test x"$have_c_altivec" = x"yes")
if test x"$have_c_altivec" = x"yes" ; then
  AC_DEFINE([CAN_COMPILE_C_ALTIVEC], 1,
    [Define if your compiler groks C AltiVec extensions.])
  AC_SUBST(ALTIVEC_CFLAGS)
fi

AC_MSG_CHECKING([if linker needs -framework vecLib])
if test x"$use_altivec" = x"yes" ; then
  save_LDFLAGS="$LDFLAGS"
  LDFLAGS="$LDFLAGS -framework vecLib"
  ld_altivec=no
  AC_TRY_LINK([], [], [ld_altivec=yes])
  LDFLAGS="$save_LDFLAGS"
fi
AC_MSG_RESULT($ld_altivec)
if test x"$ld_altivec" = x"yes" ; then
  LDFLAGS="$LDFLAGS -framework vecLib"
fi

dnl
dnl gcc stuff
dnl
AM_CONDITIONAL(HAVE_GCC, test x"$GCC" = x"yes")

dnl XXX hack! filter/pp needs -fomit-fame-pointer with gcc
have_fomit_fp="no"
if test x"$GCC" = x"yes" ; then
  if echo "$CFLAGS" | grep -vq -- '-fomit-frame-pointer' ; then
    AC_TRY_CFLAGS([-fomit-frame-pointer], [have_fomit_fp="yes"])
  fi
fi
AM_CONDITIONAL(HAVE_FOMIT_FP, test x"$have_fomit_fp" = x"yes")

dnl Check for gcc2, which doesn't seem to handle asm templates
dnl
gcc2=no
if test x"$GCC" = x"yes" ; then
  gcc_ver="`LANG=C $CC -dumpversion`"
  if test x"$gcc_ver" != x"" ; then
    if echo $gcc_ver | grep -q ^2 ; then
      gcc2=yes
    fi
  fi
fi
AM_CONDITIONAL(HAVE_GCC2, test x"$gcc2" = x"yes")

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
dnl AC_CONFIG_SUBDIRS(libltdl)
dnl LTLIBOBJS=`echo "$AC_LIBOBJ" | sed 's,.o ,.lo ,g;s,.o$,.lo,'`
dnl AC_SUBST(LTLIBOBJS)

OPT_CFLAGS="-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 $CFLAGS"
AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
AC_SUBST(CFLAGS)

OPT_CXXFLAGS="$CXXFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"
AC_TRY_CXXFLAGS([$OPT_CXXFLAGS],[CXXFLAGS=$OPT_CXXFLAGS])
AC_SUBST(CXXFLAGS)

dnl
dnl fast integers
dnl
AC_MSG_CHECKING(if fast integers are available)
AC_TRY_COMPILE([
#include <inttypes.h>
], [
volatile uint_fast64_t i=0x01234567;
return 0
], [
AC_MSG_RESULT([yes])
], [
AC_DEFINE([EMULATE_FAST_INT], 1, [Define if your system lacks uint_fast64_t])
AC_MSG_RESULT([no])
])


dnl
dnl pkgconfig
dnl
if test -z "$PKG_CONFIG" ; then
  AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
fi


dnl ---------------------------------------------------------------------
dnl X11 checks

dnl AC_MSG_CHECKING([whether X11 support is requested])
dnl Default is enabled X11

dnl AC_ARG_ENABLE(x,  AC_HELP_STRING([--enable-x], [build X11 dependent plugins (yes)]), 
dnl [
dnl if test x"${enableval}" = x"yes" ; then
dnl     AC_MSG_RESULT(yes)
dnl     USE_X11=yes
dnl else
dnl     AC_MSG_RESULT(no)
dnl     USE_X11=no
dnl fi], [
dnl USE_X11=yes
dnl AC_MSG_RESULT(yes)]
dnl )

dnl if test x"${USE_X11}" = x"yes" ; then

AC_PATH_XTRA
if test x"${no_x}" = x"yes" ; then
  AC_MSG_WARN(can not find X11)
  USE_X11=no
else
  AC_DEFINE([HAVE_X11], 1, [Have X11 support])
  USE_X11=yes
fi

AC_SUBST(X_CFLAGS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_includes)
AC_SUBST(x_libraries)

dnl fi

AM_CONDITIONAL(HAVE_X11, test x"${USE_X11}" = x"yes")

AC_CHECK_LIB(Xv, XvQueryExtension,
  [have_xv=yes
    AC_DEFINE([HAVE_LIBXV], 1,
      [Have libxv support])],
  [have_xv=no],
  [$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS])
AM_CONDITIONAL(HAVE_LIBXV, test x"$have_xv" = x"yes")

AC_CHECK_HEADERS([X11/Xaw/Simple.h], 
  [have_xaw_simple=yes
    AC_DEFINE([HAVE_XAW_SIMPLE], 1,
      [Have the Xaw Simple.h file support])],
  [have_xaw_simple=no])
AM_CONDITIONAL(HAVE_XAW_SIMPLE, test x"$have_xaw_simple" = x"yes" )

AC_CHECK_LIB(Xpm, XpmFreeAttributes,
  [have_xpm=yes
    AC_DEFINE([HAVE_LIBXPM], 1,
      [Have libXpm support])],
  [have_xpm=no],
  [$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS])
AM_CONDITIONAL(HAVE_LIBXPM, test x"$have_xpm" = x"yes")

dnl end X11 checks
dnl ---------------------------------------------------------------------

AC_CHECK_LIB(z, gzopen,
  [],
  [AC_MSG_ERROR([transcode depends on libz, but cannot links against libz])],
  [])

AC_CHECK_LIB(m, sin,
  [],
  [AC_MSG_ERROR([transcode depends on libm (>= 2.0), but cannot link against libm])],
  [-lc])

dnl
dnl libavcodec
dnl
TC_PATH_FFMPEG_LIBS(AC_DEFINE([HAVE_FFMPEG_LIBS], 1, [Have ffmpeg avcodec library support]))
AM_CONDITIONAL(HAVE_FFMPEG_LIBS, test x"$have_ffmpeg_libs" = x"yes")


dnl
dnl below are build options for transcode, most involving other packages
dnl


dnl
dnl static import frame buffer 
dnl
AC_MSG_CHECKING([for internal static framebuffer support])
AC_ARG_ENABLE(statbuffer,
  AC_HELP_STRING([--enable-statbuffer],
    [enable internal static framebuffer support (yes)]), 
  [case "${enableval}" in
    yes) ;;
    no)  ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-statbuffer) ;;
  esac],
  [enable_statbuffer=yes])
AC_MSG_RESULT($enable_statbuffer)
if test x"$enable_statbuffer" = x"yes" ; then
  AC_DEFINE([STATBUFFER], 1, [Use the static buffers])	
fi

dnl
dnl experimental network streaming support
dnl
AC_MSG_CHECKING(for network streaming support)
AC_ARG_ENABLE(netstream,
  AC_HELP_STRING([--enable-netstream],
    [enable network streaming support (no)]),
  [case "${enableval}" in
    yes) ;;
    no)  ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-netstream) ;;
  esac],
  [enable_netstream=no])
AC_MSG_RESULT($enable_netstream)
if test x"$enable_netstream" = x"yes" ; then
  AC_DEFINE([NET_STREAM], 1, [Enable network functionality])	
fi
AM_CONDITIONAL(NET_STREAM, test x"$enable_netstream" = x"yes")

dnl
dnl freetype2
dnl
TC_PATH_FT2([9.2.0], AC_DEFINE([HAVE_FREETYPE2], 1, [Define if you have the freetype2 lib]))
AM_CONDITIONAL(HAVE_FREETYPE2, test x"$have_freetype2" = x"yes")

dnl
dnl v4l
dnl
TC_CHECK_V4L(AC_DEFINE([HAVE_V4L], 1, [Have video4linux(2)]))
AM_CONDITIONAL(HAVE_V4L, test x"$have_v4l" = x"yes")

dnl
dnl bktr
dnl
TC_CHECK_BKTR(AC_DEFINE([HAVE_BKTR], 1, [Have bktr(4)]))
AM_CONDITIONAL(HAVE_BKTR, test x"$have_bktr" = x"yes")

dnl
dnl sunau
dnl
TC_CHECK_SUNAU(AC_DEFINE([HAVE_SUNAU], 1, [Have Sun style audio(4)]))
AM_CONDITIONAL(HAVE_SUNAU, test x"$have_sunau" = x"yes")

dnl
dnl avifile support
dnl
AVIFILE_EXTRA_LIBS="$AVIFILE_EXTRA_LIBS $X_LIBS $PTHREAD_LIBS"
TC_PATH_PKG(avifile, no, AVIFILE, avifile, avifile-config,
  [C++], avifile.h, aviplay, GetAvifileVersion)
if test x"$have_avifile" = x"yes" ; then
  AC_DEFINE([HAVE_AVIFILE], 1, [have avifile support])
  if echo "$AVIFILE_CFLAGS" | grep -q '/avifile-0\.7' ; then
    have_avifile_includes=7
  else
    have_avifile_includes=0
  fi
  AC_DEFINE_UNQUOTED([HAVE_AVIFILE_INCLUDES], $have_avifile_includes,
    [avifile includes directory version specific])
fi
AM_CONDITIONAL(HAVE_AVIFILE, test x"$have_avifile" = x"yes")
AC_SUBST(AVIFILE_CFLAGS)
AC_SUBST(AVIFILE_LIBS)

dnl
dnl lame support
dnl
dnl TC_PATH_LAME(AC_DEFINE_UNQUOTED([HAVE_LAME], $lame_version, [Have lame lib support]))
dnl AM_CONDITIONAL(HAVE_LAME, test x"$have_lame" = x"yes")
TC_PATH_PKG(lame, yes, LAME, lame, [],
  [C], [], mp3lame, lame_init)
if test x"$have_lame" = x"yes" ; then
  lame_inc=no
  save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $LAME_CFLAGS"
  AC_CHECK_HEADER([lame/lame.h],
    [AC_DEFINE([HAVE_LAME_INC], [1],
      [Have Lame includes in separate path]) lame_inc=yes])
  if test x"$lame_inc" = x"no" ; then
    AC_CHECK_HEADER([lame.h], lame_inc=yes)
  fi
  if test x"$lame_inc" = x"no" ; then
    AC_MSG_ERROR([lame requested, but cannot compile lame.h])
  fi
  CPPFLAGS="$save_CPPFLAGS"

  AC_MSG_CHECKING([lame version])
  ac_save_CFLAGS="$CFLAGS"
  ac_save_LIBS="$LIBS"
  CFLAGS="$CFLAGS $LAME_CFLAGS"
  LIBS="$LIBS $LAME_LIBS"
  AC_TRY_RUN([
#include <stdio.h>

#ifdef HAVE_LAME_INC
#include <lame/lame.h>
#else
#include <lame.h>
#endif

int main () {
  lame_version_t lv;
  get_lame_version_numerical(&lv);
  if(lv.alpha || lv.beta) lv.minor--;
  printf("%d%d\n", lv.major, lv.minor);
  return 0;
}
],
    [lame_version="`./conftest$ac_exeext`"],
    [AC_MSG_ERROR([lame requested, but cannot compile and run a test program])],,
    [echo $ac_n "cross compiling; assumed OK... $ac_c"])
  CFLAGS="$ac_save_CFLAGS"
  LIBS="$ac_save_LIBS"

  if test $lame_version -lt 389 ; then
    AC_MSG_ERROR([lame requested, but lame version < 3.89])
  fi
  AC_DEFINE_UNQUOTED([HAVE_LAME], $lame_version, [Have lame lib support])
fi
AM_CONDITIONAL(HAVE_LAME, test x"$have_lame" = x"yes")
AC_SUBST(LAME_CFLAGS)
AC_SUBST(LAME_LIBS)


dnl
dnl ogg support
dnl
TC_PATH_PKG(ogg, no, OGG, ogg, [],
  [C], [ogg/ogg.h], ogg, ogg_stream_init)
if test x"$have_ogg" = x"yes" ; then
  AC_DEFINE([HAVE_OGG], 1, [have ogg support])
fi
AM_CONDITIONAL(HAVE_OGG, test x"$have_ogg" = x"yes")
AC_SUBST(OGG_CFLAGS)
AC_SUBST(OGG_LIBS)

dnl
dnl vorbis support
dnl
VORBIS_EXTRA_LIBS="$VORBIS_EXTRA_LIBS $OGG_LIBS -lm"
TC_PATH_PKG(vorbis, no, VORBIS, vorbis, [],
  [C], [vorbis/codec.h], vorbis, vorbis_info_init)
if test x"$have_vorbis" = x"yes" ; then
  AC_DEFINE([HAVE_VORBIS], 1, [have vorbis support])
fi
AM_CONDITIONAL(HAVE_VORBIS, test x"$have_vorbis" = x"yes")
AC_SUBST(VORBIS_CFLAGS)
AC_SUBST(VORBIS_LIBS)

dnl
dnl theora support
dnl
THEORA_EXTRA_LIBS="$THEORA_EXTRA_LIBS $OGG_LIBS -lm"
TC_PATH_PKG(theora, no, THEORA, theora, theora-config,
  [C], [theora/theora.h], theora, theora_info_init)
if test x"$have_theora" = x"yes" ; then
  AC_DEFINE([HAVE_THEORA], 1, [have theora support])
fi
AM_CONDITIONAL(HAVE_THEORA, test x"$have_theora" = x"yes")
AC_SUBST(THEORA_CFLAGS)
AC_SUBST(THEORA_LIBS)

dnl
dnl libdvdread support
dnl
DVDREAD_EXTRA_LIBS="$DVDREAD_EXTRA_LIBS -lm"
TC_PATH_PKG(libdvdread, yes, LIBDVDREAD, libdvdread, [],
  [C], [], dvdread, DVDOpen)
if test x"$have_libdvdread" = x"yes" ; then
  libdvdread_inc=no
  save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $LIBDVDREAD_CFLAGS"
  AC_CHECK_HEADER([dvdread/dvd_reader.h],
    [AC_DEFINE([HAVE_LIBDVDREAD_INC], [1],
      [have libdvdread includes in separate path])
    libdvdread_inc=yes])
  if test x"$libdvdread_inc" = x"no" ; then
    AC_CHECK_HEADER([dvd_reader.h],
      [libdvdread_inc=yes])
  fi
  CPPFLAGS="$save_CPPFLAGS"
  if test x"$libdvdread_inc" = x"no" ; then
    AC_MSG_ERROR([libdvdread requested, but cannot compile dvd_reader.h])
  fi
  AC_DEFINE([HAVE_LIBDVDREAD], 1, [have libdvdread support])
fi
AM_CONDITIONAL(HAVE_LIBDVDREAD, test x"$have_libdvdread" = x"yes")
AC_SUBST(LIBDVDREAD_CFLAGS)
AC_SUBST(LIBDVDREAD_LIBS)


dnl
dnl xvid support
dnl
dnl XVID_EXTRA_LIBS="$XVID_EXTRA_LIBS -lm"
dnl TC_PATH_PKG(xvid, no, XVID, xvid, xvid-config,
dnl   [C], [xvid4.h], xvidcore, xvid_encore)
dnl if test x"$have_xvid" = x"yes" ; then
dnl   AC_DEFINE([HAVE_XVID], 1, [have xvid support])
dnl fi
dnl AM_CONDITIONAL(HAVE_XVID, test x"$have_xvid" = x"yes")
dnl
AC_MSG_CHECKING([for default xvid])
AC_ARG_WITH(default-xvid,
  AC_HELP_STRING([--with-default-xvid=xvid2/xvid3/xvid4],
    [Default xvid version (xvid4)]),
  [default_xvid=$withval],
  [default_xvid="xvid4"])
AC_MSG_RESULT($default_xvid)
XVID_DEFAULT="$default_xvid"
AC_SUBST(XVID_DEFAULT)

dnl
dnl MPlayer libpostproc
dnl
dnl AM_PATH_POSTPROC(AC_DEFINE([HAVE_LIBPOSTPROC], 1, [Have libpostproc support]))
dnl AM_CONDITIONAL(HAVE_LIBPOSTPROC, test x"$have_libpostproc" = x"yes")

dnl
dnl GM's lve
dnl
TC_PATH_LVE(AC_DEFINE([HAVE_LIBLVE], 1, [Have liblve support]))
AM_CONDITIONAL(HAVE_LIBLVE, test x"$have_liblve" = x"yes")

dnl
dnl PVM
dnl
TC_PATH_PVM3(AC_DEFINE([HAVE_PVM3], 1, [Have pvm3 support]))
AM_CONDITIONAL(HAVE_PVM3, test x"$have_pvm3" = x"yes")

dnl
dnl libdv
dnl
LIBDV_EXTRA_LIBS="$LIBDV_EXTRA_LIBS $PTHREAD_LIBS -lm"
TC_PATH_PKG(libdv, no, LIBDV, libdv, [],
  [C], [libdv/dv.h], dv, dv_init)
if test x"$have_libdv" = x"yes" ; then
  AC_DEFINE([HAVE_LIBDV], 1, [have libdv support])
  save_LDFLAGS="$LDFLAGS"
  LDFLAGS="$LDFLAGS $LIBDV_LIBS"
  save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $LIBDV_CFLAGS"
  dnl check for libdv version >= 0.95
  AC_CHECK_LIB(dv, dv_encoder_new,
    [AC_DEFINE([LIBDV_095], [1], [Have libdv 0.95 or newer])],
    [], 
    [$LIBDV_EXTRA_LIBS])
  dnl check for libdv version >= 0.99
  AC_CHECK_LIB(dv, dv_calculate_samples,
    [AC_DEFINE([LIBDV_099], [1], [Have libdv 0.99 or newer])],
    [], 
    [$LIBDV_EXTRA_LIBS])
  dnl check for libdv version >= 0.103
  AC_TRY_COMPILE([#include <libdv/dv_types.h>
      #include <stdio.h>],
    [printf("header_size = %d\n", header_size);],
    [],
    [AC_DEFINE([LIBDV_0103], [1], [Have libdv 0.103 or newer])])
  LDFLAGS="$save_LDFLAGS"
  CPPFLAGS="$save_CPPFLAGS"
fi
AM_CONDITIONAL(HAVE_LIBDV, test x"$have_libdv" = x"yes")
AC_SUBST(LIBDV_CFLAGS)
AC_SUBST(LIBDV_LIBS)

dnl
dnl libquicktime
dnl
LIBQUICKTIME_EXTRA_LIBS="$LIBQUICKTIME_EXTRA_LIBS -lpng -lz $PTHREAD_LIBS -lm $LIBDV_LIBS"
TC_PATH_PKG(libquicktime, no, LIBQUICKTIME, libquicktime, lqt-config,
  [C], [quicktime/lqt.h], quicktime, quicktime_open)
if test x"$have_libquicktime" = x"yes" ; then
  AC_DEFINE([HAVE_LIBQUICKTIME], 1, [have libquicktime support])
fi
AM_CONDITIONAL(HAVE_LIBQUICKTIME, test x"$have_libquicktime" = x"yes")
AC_SUBST(LIBQUICKTIME_CFLAGS)
AC_SUBST(LIBQUICKTIME_LIBS)

dnl
dnl LZO
dnl
TC_PATH_PKG(lzo, no, LZO, lzo, [],
  [C], [lzo1x.h], lzo, lzo_version)
if test x"$have_lzo" = x"yes" ; then
  AC_DEFINE([HAVE_LZO], 1, [have lzo support])
fi
AM_CONDITIONAL(HAVE_LZO, test x"$have_lzo" = x"yes")
AC_SUBST(LZO_CFLAGS)
AC_SUBST(LZO_LIBS)

dnl
dnl A52
dnl
A52_EXTRA_LIBS="$A52_EXTRA_LIBS -lm"
TC_PATH_PKG(a52, no, A52, a52, [],
  [C], [a52dec/a52.h], a52, a52_init)
if test x"$have_a52" = x"yes" ; then
  AC_DEFINE([HAVE_A52], 1, [have a52 support])
  # whether to use liba52 as the default decoder 
  AC_MSG_CHECKING(for liba52 as default decoder)
  AC_ARG_ENABLE(a52-default-decoder,
    AC_HELP_STRING([--enable-a52-default-decoder],
      [liba52 as default decoder (disabled)]),
    [case "${enableval}" in
      yes) ;;
      no)  ;;
      *) AC_MSG_ERROR(bad value ${enableval} for --enable-a52-default-decoder) ;;
    esac],
    [enable_a52_default_decoder=no])
  AC_MSG_RESULT($enable_a52_default_decoder)
  if test x"${enable_a52_default_decoder}" = x"yes"; then
    AC_DEFINE([USE_LIBA52_DECODER], 1,
      [Use the liba52 decoder as default])	
  fi
else
  AC_MSG_CHECKING(for use libac3 as default decoder)
  AC_MSG_RESULT(yes)
fi
AM_CONDITIONAL(HAVE_A52, test x"$have_a52" = x"yes")
AC_SUBST(A52_CFLAGS)
AC_SUBST(A52_LIBS)


dnl
dnl libmpeg3
dnl
LIBMPEG3_EXTRA_LIBS="$LIBMPEG3_EXTRA_LIBS $A52_LIBS -lm $PTHREAD_LIBS"
TC_PATH_PKG(libmpeg3, no, LIBMPEG3, libmpeg3, [],
  [C], [], mpeg3, mpeg3_open)
if test x"$have_libmpeg3" = x"yes" ; then
  libmpeg3_inc=no
  save_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $LIBMPEG3_CFLAGS"
  AC_CHECK_HEADER([libmpeg3/libmpeg3.h],
    [LIBMPEG3_CFLAGS="$LIBMPEG3_CFLAGS/libmpeg3"
      libmpeg3_inc=yes])
  if test x"$libmpeg3_inc" = x"no" ; then
    AC_CHECK_HEADER([mpeg3/libmpeg3.h],
      [LIBMPEG3_CFLAGS="$LIBMPEG3_CFLAGS/mpeg3"
        libmpeg3_inc=yes])
  fi
  if test x"$libmpeg3_inc" = x"no" ; then
    AC_CHECK_HEADER([libmpeg3.h],
	  [libmpeg3_inc=yes])
  fi
  if test x"$libmpeg3_inc" = x"no" ; then
    AC_MSG_ERROR([libmpeg3 requested, but cannot compile libmpeg3.h])
  fi
  CPPFLAGS="$save_CPPFLAGS"
  AC_DEFINE([HAVE_LIBMPEG3], 1, [have libmpeg3 support])
fi
AM_CONDITIONAL(HAVE_LIBMPEG3, test x"$have_libmpeg3" = x"yes")
AC_SUBST(LIBMPEG3_CFLAGS)
AC_SUBST(LIBMPEG3_LIBS)


dnl
dnl libxml2
dnl
LIBXML2_EXTRA_LIBS="$LIBXML2_EXTRA_LIBS -lz -lm"
TC_PATH_PKG(libxml2, no, LIBXML2, [libxml-2.0], xml2-config,
  [C], [libxml/parser.h], xml2, xmlStrcmp)
if test x"$have_libxml2" = x"yes" ; then
  AC_DEFINE([HAVE_LIBXML2], 1, [have libxml2 support])
fi
AM_CONDITIONAL(HAVE_LIBXML2, test x"$have_libxml2" = x"yes")
AC_SUBST(LIBXML2_CFLAGS)
AC_SUBST(LIBXML2_LIBS)

dnl
dnl ibp and lors
dnl
TC_PATH_IBP(AC_DEFINE([HAVE_IBP], 1, [ibp and lors support]))
AM_CONDITIONAL(HAVE_IBP, test x"$have_ibp" = x"yes")

dnl 
dnl mjpegtools (actually only YUV4MPEG)
dnl
TC_PATH_PKG(mjpegtools, no, MJPEGTOOLS, mjpegtools, mjpegtools-config,
  [C], [mjpegtools/yuv4mpeg.h], mjpegutils, y4m_si_get_height)
if test x"$have_mjpegtools" = x"yes" ; then
  AC_DEFINE([HAVE_MJPEGTOOLS], 1, [have mjpegtools support])
  # check if mjpegtools version >= Mar 31 2004
  save_CFLAGS="$CFLAGS"
  save_LIBS="$LIBS"
  CFLAGS="$CFLAGS $MJPEGTOOLS_CFLAGS"
  LIBS="$LIBS $MJPEGTOOLS_LIBS"
  AC_TRY_LINK([
#if defined(HAVE_MJPEGTOOLS_INC)
#include "yuv4mpeg.h"
#include "mpegconsts.h"
#else
#include "mjpegtools/yuv4mpeg.h"
#include "mjpegtools/mpegconsts.h"
#endif
],
    [y4m_write_frame_header(1, NULL, NULL)], 
    [AC_DEFINE([USE_NEW_MJPEGTOOLS_CODE], [1],
      [using mjpegtools post Mar 31 2004])])
  CFLAGS="$save_CFLAGS"
  LIBS="$save_LIBS"
fi
AM_CONDITIONAL(HAVE_MJPEGTOOLS, test x"$have_mjpegtools" = x"yes")
AC_SUBST(MJPEGTOOLS_CFLAGS)
AC_SUBST(MJPEGTOOLS_LIBS)


dnl
dnl SDL
dnl
TC_PATH_SDL(1.1.6, [AC_DEFINE([HAVE_SDL], 1, [Have libsdl support])])
AM_CONDITIONAL(HAVE_SDL, test x"$have_sdl" = x"yes")

dnl
dnl Divx4linux
dnl
AC_CHECK_HEADERS([decore.h], 
  [have_divx_decore=yes
    AC_DEFINE([HAVE_DIVX_DECORE], 1,
      [Have the Divx4linux decore.h header file])],
  [have_divx_decore=no])
AM_CONDITIONAL(HAVE_DIVX_DECORE, test x"$have_divx_decore" = x"yes" )

AC_CHECK_HEADERS([encore2.h], 
  [have_divx_encore2=yes
    AC_DEFINE([HAVE_DIVX_ENCORE2], 1,
      [Have the Divx4linux encore2.h header file])],
  [have_divx_encore2=no])
AM_CONDITIONAL(HAVE_DIVX_ENCORE2, test x"$have_divx_encore2" = x"yes" )

dnl
dnl GTK
dnl
if test x"$PKG_CONFIG" = x"no" ; then
  echo -n "pkgconfig disabled... "
  enable_gtk=no
fi
TC_PATH_GTK(AC_DEFINE([HAVE_GTK], 1, [define if your system has gtk]))
AM_CONDITIONAL(HAVE_GTK, test x"$have_gtk" = x"yes")

dnl
dnl libfame
dnl
TC_PATH_LIBFAME([],[AC_DEFINE([HAVE_LIBFAME], 1, [Have libfame support])])
AM_CONDITIONAL(HAVE_LIBFAME, test x"$have_libfame" = x"yes")

dnl
dnl ImageMagick
dnl
IMAGEMAGICK_EXTRA_LIBS="$IMAGEMAGICK_EXTRA_LIBS -lz -lm"
TC_PATH_PKG(imagemagick, no, IMAGEMAGICK, ImageMagick, Magick-config,
  [C], [magick/api.h], Magick, InitializeMagick)
if test x"$have_imagemagick" = x"yes" ; then
  AC_DEFINE([HAVE_IMAGEMAGICK], 1, [have ImageMagick support])
fi
AM_CONDITIONAL(HAVE_IMAGEMAGICK, test x"$have_imagemagick" = x"yes")
AC_SUBST(IMAGEMAGICK_CFLAGS)
AC_SUBST(IMAGEMAGICK_LIBS)

dnl
dnl libjpeg
dnl
TC_PATH_LIBJPEG(AC_DEFINE([HAVE_LIBJPEG], 1, [Have libjpeg support]))
AM_CONDITIONAL(HAVE_LIBJPEG, test x"$have_libjpeg" = x"yes")

dnl
dnl ffmpeg binary
dnl
TC_PATH_FFMPEG(AC_DEFINE([HAVE_FFMPEG], 1, [Have ffmpeg binary support]))
AM_CONDITIONAL(HAVE_FFMPEG, test x"$have_ffmpeg" = x"yes")


dnl
dnl The following come with transcode
dnl


dnl
dnl libxio
dnl
AC_MSG_CHECKING([whether internal libxio support is requested])
AC_ARG_ENABLE(xio,
  AC_HELP_STRING([--enable-xio],
    [link to the xio library (no)]),
  [case "${enableval}" in
    yes) libxio=yes ;;
    no)  libxio=no ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-xio) ;;
  esac],
  [libxio=no])
AC_MSG_RESULT($libxio)
if test x"$libxio" = x"yes" ; then
  if test x"$have_ibp" = x"yes" ; then
    XIO_CFLAGS="-DUSE_XIO -I\$(top_srcdir)/libxio"
    XIO_LIBS="\$(top_builddir)/libxio/libxio.la $IBP_LIBS $LIBXML2_LIBS"
  else
    XIO_CFLAGS="-DUSE_XIO -I\$(top_srcdir)/libxio"
    XIO_LIBS="\$(top_builddir)/libxio/libxio.la"
  fi
else 
  XIO_CFLAGS="-I\$(top_srcdir)/libxio"
  XIO_LIBS=""
fi
AC_SUBST(XIO_CFLAGS)
AC_SUBST(XIO_LIBS)

dnl
dnl avilib
dnl
AVILIB_CFLAGS="-I\$(top_srcdir)/avilib"
AVILIB_LIBS="\$(top_builddir)/avilib/libavi.la"
AC_SUBST(AVILIB_CFLAGS)
AC_SUBST(AVILIB_LIBS)

dnl
dnl libioaux
dnl
TCIOAUX_CFLAGS="-I\$(top_srcdir)/libioaux"
TCIOAUX_LIBS="\$(top_builddir)/libioaux/libtcioaux.la"
AC_SUBST(TCIOAUX_CFLAGS)
AC_SUBST(TCIOAUX_LIBS)

dnl
dnl libac3
dnl
AC3_CFLAGS="-I\$(top_srcdir)/libac3"
AC3_LIBS="\$(top_builddir)/libac3/libac3_tc.la"
AC_SUBST(AC3_CFLAGS)
AC_SUBST(AC3_LIBS)

dnl
dnl libmpeg2
dnl
MPEG2CVS_CFLAGS="-I\$(top_srcdir)/libmpeg2"
MPEG2CVS_LIBS="\$(top_builddir)/libmpeg2/libmpeg2cvs.la"
AC_SUBST(MPEG2CVS_CFLAGS)
AC_SUBST(MPEG2CVS_LIBS)

dnl
dnl libvo
dnl
LIBVO_CFLAGS="-I\$(top_srcdir)/libvo"
LIBVO_LIBS="\$(top_builddir)/libvo/libvout.la"
AC_SUBST(LIBVO_CFLAGS)
AC_SUBST(LIBVO_LIBS)

dnl
dnl aclib
dnl
ACLIB_CFLAGS="-I\$(top_srcdir)/aclib"
ACLIB_LIBS="\$(top_builddir)/aclib/libac.la"
AC_SUBST(ACLIB_CFLAGS)
AC_SUBST(ACLIB_LIBS)

dnl
dnl bbmpeg
dnl
BBMPEG_CFLAGS="-I\$(top_srcdir)/bbmpeg"
BBMPEG_LIBS="\$(top_builddir)/bbmpeg/libbbmpeg.la"
AC_SUBST(BBMPEG_CFLAGS)
AC_SUBST(BBMPEG_LIBS)

dnl
dnl libdvenc
dnl
LIBDVENC_CFLAGS="-I\$(top_srcdir)/libdvenc"
LIBDVENC_LIBS="\$(top_builddir)/libdvenc/libdvenc.la"
AC_SUBST(LIBDVENC_CFLAGS)
AC_SUBST(LIBDVENC_LIBS)


dnl
dnl warning flags; always add -Wall
dnl
if test x"$GCC" = x"yes" ; then
    OPT_CFLAGS="-Wall $CFLAGS"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
fi
AC_ARG_ENABLE([warnings-as-errors],
    AC_HELP_STRING([--enable-warnings-as-errors], [treat warnings as errors]))
if test x"$enable_warnings-as-errors" = x"yes" -a x"$GCC" = x"yes" ; then
    dnl compiler warnings treated as erors
    OPT_CFLAGS="-Werror $CFLAGS"
    AC_TRY_CFLAGS([$OPT_CFLAGS],[CFLAGS=$OPT_CFLAGS])
fi
AC_SUBST(CFLAGS)

dnl import/export module path
dnl
MOD_PATH="\${prefix}/lib/transcode"
AC_ARG_WITH(mod-path,
  AC_HELP_STRING([--with-mod-path],
    [where export/import modules are installed (${prefix}/lib/transcode)]),
  MOD_PATH=$withval)
AC_SUBST(MOD_PATH)

transcode_0_6=yes
AC_DEFINE([TRANSCODE_0_6], 1, [Define for transcode_0_6])
AM_CONDITIONAL(TRANSCODE_0_6, test x"$transcode_0_6" = x"yes")

X_CFLAGS=`echo $X_CFLAGS | sed -e 's/  */ /g'`
X_PRE_LIBS=`echo $X_PRE_LIBS | sed -e 's/  */ /g'`
X_LIBS=`echo $X_LIBS | sed -e 's/  */ /g'`
X_EXTRA_LIBS=`echo $X_EXTRA_LIBS | sed -e 's/  */ /g'`

CC=`echo $CC | sed -e 's/  */ /g'`
CFLAGS=`echo $CFLAGS | sed -e 's/  */ /g'`
CPPFLAGS=`echo $CPPFLAGS | sed -e 's/  */ /g'`
CXXFLAGS=`echo $CXXFLAGS | sed -e 's/  */ /g'`
LDFLAGS=`echo $LDFLAGS | sed -e 's/  */ /g'`

AC_SUBST(CFLAGS)
AC_SUBST(CC)
AC_SUBST(LDFLAGS)

dnl			ffmpeg/Makefile
dnl			ffmpeg/libavcodec/Makefile
dnl			ffmpeg/libavcodec/i386/Makefile
dnl			ffmpeg/libavcodec/ppc/Makefile

AC_OUTPUT([
	Makefile
	aclib/Makefile
	avilib/Makefile
	bbmpeg/Makefile
	bbmpeg/tcmplex/Makefile
	contrib/Makefile
	contrib/pnmpvn/Makefile
	docs/Makefile
	docs/html/Makefile
	docs/man/Makefile
	export/Makefile
	filter/Makefile
	filter/divxkey/Makefile
	filter/extsub/Makefile
	filter/ivtc/Makefile
	filter/pp/Makefile
	filter/preview/Makefile
	filter/resample/Makefile
	filter/subtitler/Makefile
	filter/test/Makefile
	filter/tomsmocomp/Makefile
	filter/yuvdenoise/Makefile
	import/Makefile
	import/af6/Makefile
	import/lve/Makefile
	import/net/Makefile
	import/nuv/Makefile
	import/v4l/Makefile
	import/yuv/Makefile
	libac3/Makefile
	libdldarwin/Makefile
	libdvenc/Makefile
	libioaux/Makefile
	libmpeg2/Makefile
	libsupport/Makefile
	libvo/Makefile
	libxio/Makefile
	pvm3/Makefile
	src/Makefile
	testsuite/Makefile
	tools/Makefile
	transcode.spec
])


AC_MSG_RESULT([
----------------------------------------------------------
Summary for transcode $VERSION features:
*-*-*-*-*-*-* Core *-*-*-*-*-*-*
static AV-frame buffering                        $enable_statbuffer
support for network (sockets) streams            $enable_netstream
DVD navigation support with libdvdread           $have_libdvdread
experimental xio | support for IBP storage       $libxio | $have_ibp
pvm3 support                                     $have_pvm3
ffmpeg libs headers                              $with_ffmpeg_libs_i
ffmpeg libs libraries                            $with_ffmpeg_libs_l
ffmpeg libs build                                $FFMPEG_LIBS_BUILD
ffmpeg libs version                              $FFMPEG_LIBS_VERSION
ffmpeg libs statically linked                    $enable_ffmpeg_libs_static
*-*-*-*-*-*-* Codec *-*-*-*-*-*-*
nasm dependent modules                           $have_asm_nasm
lame support (>=3.89) | ver                      $have_lame | $lame_version
mjpegtools dependent modules                     $have_mjpegtools
libdv dependent modules			         $have_libdv
Ogg support | Vorbis support | Theora support    $have_ogg | $have_vorbis | $have_theora
Default xvid export module                       $XVID_DEFAULT
liba52 audio plugin (>=0.7.3) | default decoder  $have_a52 | $enable_a52_default_decoder
avifile API support                              $have_avifile
ImageMagick dependent modules (>=5.4.3)          $have_imagemagick
libjpeg dependent modules | mmx accel            $have_libjpeg | $have_libjpegmmx
liblzo dependent modules                         $have_lzo
libxml2 dependent modules                        $have_libxml2
v4l/v4l2 modules                                 $have_v4l
experimental lve support                         $have_liblve
libmpeg3 dependent modules                       $have_libmpeg3
libfame video encoding plugin                    $have_libfame
libquicktime dependent modules                   $have_libquicktime
FFmpeg binary module                             $have_ffmpeg
bktr video device import module                  $have_bktr
sunau audio device import module                 $have_sunau
SDL support                                      $have_sdl
GTK support                                      $have_gtk
*-*-*-*-*-*-* Filter *-*-*-*-*-*-*
X11 dependent filter plugins                     $USE_X11
freetype2 dependent filter (text, subtitler)     $have_freetype2
----------------------------------------------------------
])

if test x"$have_x86cpu" = x"true" ; then
  case "${NASM}" in
  no)
     AC_MSG_RESULT([
It is recommended that you install/upgrade your nasm.
You need at least 0.9.34 from http://nasm.sf.net])
  ;;
  esac
fi
